#
# READ WHEN INTERACTIVE
#
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=$HOME/.luarocks/bin/:$PATH

. /opt/asdf-vm/asdf.sh

# STEAM WITH WAYLAND
#
# Debuging command:
# PROTON_LOG=1 WINEDEBUG="+timestamp,+pid,+tid,+seh,+debugstr,+module" %command%
#
# General arguments to make it work:
# QT_QPA_PLATFORM=xcb LD_PRELOAD=/usr/lib/libfreetype.so.6 LD_LIBRARY_PATH=/usr/lib/openssl-1.0 %command%
#
# I've been running Wayland for the past few months now and here's a few tips that I can think of:
# - If a game is native and uses SDL (which is almost always), try adding LD_PRELOAD="/usr/lib64/libSDL2.so:/usr/lib/libSDL2.so:$LD_PRELOAD" %command% or wherever your system SDL libraries are located as a launch option, as I have yet to encounter a game that comes with SDL libraries compiled with Wayland support. This will fix stutter for some games, but most importantly will remove dependency on XWayland
# - You'll also come across native games that won't work because it can't find a X display as it tries to force output via X11. If you're having that issue and the first tip didn't work, you'll have to fallback to using SDL_VIDEODRIVER=x11 %command% instead, very rarely you'll have to do LD_PRELOAD="/usr/lib64/libSDL2.so:/usr/lib/libSDL2.so:$LD_PRELOAD" SDL_VIDEODRIVER=x11 %command% (I think only DUSK has this problem out of games I've tested, going from memory)
# - Some games absolutely require v-sync to be enabled otherwise it'll look like it's displaying at half of the framerate it's rendering at. Whether it adds input lag depends entirely on the game (Shadow Warrior 2 for example is extremely bad and easily adds half a second to input lag, I'd rather bump the settings low enough on my Ryzen 3400G to get ~90-100 fps than deal with the input lag)
# - This tip is a bit more specific but may also apply to other games that use Direct3D 7 or earlier as I haven't done any testing with other games from the late 90s/early 2000s except Worms Armageddon, but with Divine Divinity I've had to explicitly enable virtual desktop to get it to run, which from what I gather is a non-issue with X11. Worms Armageddon has been updated recently enough to explicitly detect Wine and automatically enable virtual desktop as a workaround so I feel like this tip may actually have more merit, I'll investigate other D3D7 and earlier games at some point and update this post
# Regardless, I've found Wayland to be a positive change and I've seen games that were stuttering at a consistent rate on X11 that had simply gone just from switching to Wayland.

# Needs qt5-wayland
# To run a Qt 5 application with the Wayland plugin [3], use -platform wayland or QT_QPA_PLATFORM=wayland environment variable. To force the usage of X11 on a Wayland session, use QT_QPA_PLATFORM=xcb. This might be necessary for some proprietary applications that do not use the system's implementation of Qt, such as zoomAUR.
export QT_QPA_PLATFORM="wayland"

# Needs qt5ct
# On some compositors, for example sway, Qt applications running natively might have missing functionality. For example, KeepassXC will be unable to minimize to tray. This can be solved by installing qt5ct and setting QT_QPA_PLATFORMTHEME=qt5ct before running the application.
export QT_QPA_PLATFORMTHEME="qt5ct"

# The Clutter toolkit has a Wayland backend that allows it to run as a Wayland client. The backend is enabled in the clutter package.
# To run a Clutter application on Wayland, set CLUTTER_BACKEND=wayland.
export CLUTTER_BACKEND="wayland"

# To run a SDL2 application on Wayland, set SDL_VIDEODRIVER=wayland
# WARNING: Many proprietary games come bundled with old versions of SDL, which don't support Wayland and might break entirely if you set SDL_VIDEODRIVER=wayland. To force the application to run with XWayland, set SDL_VIDEODRIVER=x11.
export SDL_VIDEODRIVER="x11"

# More recent versions of Firefox support opting into Wayland via an environment variable
export MOZ_ENABLE_WAYLAND=1

export PATH="$PATH:$HOME/Programs/flutter/bin/"
export PATH="$PATH:$HOME/bin"
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/.cabal/bin"
export PATH="$PATH:$HOME/.idris2/bin"

# Erlang include path, so the C language will not complain
# export C_INCLUDE_PATH=$(erl -eval 'io:format("~s", [lists:concat([code:root_dir(), "/erts-", erlang:system_info(version), "/include"])])' -s init stop -noshell)

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="bullet-train"

# System plugins
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# default: time status custom context dir screen perl ruby virtualenv nvm aws go rust elixir git hg cmd_exec_time
BULLETTRAIN_PROMPT_ORDER=(time status custom context dir screen virtualenv aws git hg cmd_exec_time)

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

###########
# ALIASES #
###########

alias telegram='telegram-desktop -workdir $HOME/.telegram'
alias vi=nvim
alias vim=nvim
alias start-postgres='podman run -d --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres'
alias start-mongodb='podman run -d --name mongodb -p 27017:27017 mongo'
alias record='wf-recorder --audio="alsa_output.pci-0000_28_00.3.analog-stereo.monitor"'

#############
# FUNCTIONS #
#############

help() {
  echo "screenshare - To share screen using pipewire xdg-desktop-portal and xdg-desktop-portal-wlr on chrome with the pipewire flag enabled chrome://flags"
  echo "screenshot/0 - Takes a screenshot"
  echo "screenshot/1 - Takes a screenshot with a filename"
  echo "luks_open/2 - Opens the DEVICE with the NAME"
  echo "mnt/2 - Mounts a btrfs with subvol=@ using the DEVICE and the MOUNT_POINT"
  echo "audio_restart/0 - Restarts the pipewire on the user"
}

# env PIPEWIRE_DEBUG=3 pipewire
# /usr/local/libexec/xdg-desktop-portal-wlr -p BGRx -l DEBUG
# /usr/local/libexec/xdg-desktop-portal --verbose -r
screenshare() {
  /usr/lib/xdg-desktop-portal -r & /usr/lib/xdg-desktop-portal-wlr
}

screenshot() {
  : ${1:=screenshot}
  grim -g "$(slurp)" - > "$1.png"
  echo "save on ~/$1.png"
}

luks_open() {
  sudo cryptsetup open "$1" "$2"
  sudo mount "/dev/mapper/$2" "$2"
}

mnt() {
  sudo mount -o noatime,nodiratime,compress=zstd,space_cache,subvol=@ $1 $2
}

audio_restart() {
  systemctl --user restart pipewire.socket
}

download_m3u8() {
  if [[ $# -lt 2 ]]; then
    echo "insert m3u8 url as first argument"
    echo "name of the file is optional (default to output.mp4)"
    return
  fi
  name="${2:-output}"
  ffmpeg -i "$1" -c copy "${name}.mp4"
}

vimx () { vi -s <(echo "$1"':wq') "$2" &> /dev/null; }

backup_data() {
  # https://wiki.archlinux.org/title/rsync
  ip="192.168.1.5"
  rsync -a -r -P --delete --inplace --backup --backup-dir=rsync://$ip/appdata/backup/ ~/data/ rsync://$ip/appdata/backup/full/
}

proton() {
  # Run example: proton run /path/to/game.exe
  export STEAM_COMPAT_DATA_PATH=~/.proton
  /home/shiryel/data/Jogos/SteamLibrary/steamapps/common/Proton\ 5.13/proton $@
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f "/home/shiryel/.ghcup/env" ] && source "/home/shiryel/.ghcup/env" # ghcup-env
